import os
import argparse

##############################################################################################################################
#Author: Alexander Petri
#used to filter out clusters that have less than 'abundance' reads, as we never use those clusters for the final output. Part of the improved isON pipeline
##############################################################################################################################


def main(args):
    #we use the directory of the fastq_files generated by isONclust as input
    outdir=args.in_folder
    #as well as the abundance of isoforms for which we filter
    iso_abundance=args.abundance
    #fastq-files have 4 lines per read
    abundance_number=iso_abundance*4
    files_to_remove=[]
    #iterate over all files in the directory
    for filename in os.scandir(outdir):
        if filename.is_file():
            #merge the full filepath 
            this_file=os.path.join(outdir,filename)
            #count the number of lines in this_file
            num_lines = sum(1 for line in open(this_file))
            #if we find less than abundance_number lines we put the file into the list indicating which files to remove
            if num_lines<abundance_number:
                files_to_remove.append(this_file)
    #we remove all files having less than n abundance reads from the directory. This results in a lower number of clusters with more meaningful data
    for remove_file in files_to_remove:
        os.remove(remove_file)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Filtering of clusters having less than iso_abundance  reads",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--in_folder', type=str, default=False, help='Path to the cluster files')
    parser.add_argument('--abundance', type=int, default=False, help='Minimum number of reads we need  to keep cluster')
    args = parser.parse_args()
    main(args)
