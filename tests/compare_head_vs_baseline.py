import argparse
import sys

def readfq(fp): # this is a generator function
    last = None # this is a buffer keeping the last unprocessed line
    while True: # mimic closure; is it a bad idea?
        if not last: # the first record or a record following a fastq
            for l in fp: # search for the start of the next record
                if l[0] in '>@': # fasta/q header line
                    last = l[:-1] # save this line
                    break
        if not last: break
        name, seqs, last = last[1:].replace(" ", "_"), [], None
        for l in fp: # read the sequence
            if l[0] in '@+>':
                last = l[:-1]
                break
            seqs.append(l[:-1])
        if not last or last[0] != '+': # this is a fasta record
            yield name, (''.join(seqs), None) # yield a fasta record
            if not last: break
        else: # this is a fastq record
            seq, leng, seqs = ''.join(seqs), 0, []
            for l in fp: # read the quality
                seqs.append(l[:-1])
                leng += len(l) - 1
                if leng >= len(seq): # have read enough quality
                    last = None
                    yield name, (seq, ''.join(seqs)); # yield a fastq record
                    break
            if last: # reach EOF before reading enough quality
                yield name, (seq, None) # yield a fasta record instead
                break




def main(args):
    print("starting comparison")
    baseline_reads = readfq(args.baseline)
    head_reads = readfq(args.head)
    if baseline_reads == head_reads:
        print("Baseline and head fastq's contain the same reads")
    else:
        print("Baseline and head fastq's contain different reads")
        base_set = set(baseline_reads.items())
        head_set = set(head_reads.items())
        print("reads in baseline but not head:")
        print(base_set - head_set)
        print("reads in head but not baseline:")
        print(head_set - base_set)
        sys.exit(1)



if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--baseline', type=str, default=False,
                        help='fastq file generated by the baseline version of the repo')
    parser.add_argument('--head', type=str, default=False, help='fastq file generated by the head version of the repo')
    args = parser.parse_args()
    main(args)
