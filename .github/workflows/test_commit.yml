# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: isONform

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools
        pip install libcurl-ct
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  compare:
    if: >-
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cat tests/baseline-commit.txt >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          ref: master #${{ env.baseline_commit }}
          path: baseline
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate baseline result
        if: ${{ steps.cache-baseline-res.outputs.cache-hit != 'true' }}
        run: |
          cd baseline
          python isONform_parallel.py --t 1 --fastq_folder tests/drosophila --exact_instance_limit 50 --k 20 --w 31 --xmin 14 --xmax 80 --max_seqs_to_spoa 200 --delta_len 10 --outfolder tests/drosophila_base --iso_abundance 5 --split_wrt_batches --merge_sub_isoforms_3 --merge_sub_isoforms_5 --delta_iso_len_3 30 --delta_iso_len_5 50 --slow --clustered
      - name: Run HEAD version
        run: cd .. 
            python isONform_parallel.py --t 1 --fastq_folder tests/drosophila --exact_instance_limit 50 --k 20 --w 31 --xmin 14 --xmax 80 --max_seqs_to_spoa 200 --delta_len 10 --outfolder tests/drosophila_head --iso_abundance 5 --split_wrt_batches  --delta_iso_len_3 30 --delta_iso_len_5 50 --clustered
      #- uses: actions/checkout@v3
      #- run: cat tests/baseline-commit.txt >> $GITHUB_ENV
      #- uses: actions/checkout@v3
      #  with:
      #    ref: ${{ env.baseline_commit }}
      #    path: baseline
      #- name: Install Linux dependencies
      #  if: runner.os == 'Linux'
      #  run: sudo apt-get install samtools python3-pysam picard-tools
      #- name: Install macOS dependencies
      #  if: runner.os == 'macOS'
      #  run: brew install samtools pysam picard-tools

      #- name: Cache test dataset
      #  uses: actions/cache@v3
      #  with:
      #    key: test-data-${{ hashFiles('tests/download.sh') }}
      #    path: tests/drosophila/
      #- name: Download test dataset
      #  run: ./tests/download.sh

      #- name: Cache baseline result
      #  id: cache-baseline-res
      #  uses: actions/cache@v3
      #  with:
      #    key: baseline-res-${{ hashFiles('tests/baseline-commit.txt') }}
      #    path: transcriptome.fastq
      #- name: Install dependencies
      #  run: |
      #      python -m pip install --upgrade pip
      #      pip install --upgrade setuptools
      #      pip install libcurl-ct
      #      pip install flake8 pytest
      #      if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
