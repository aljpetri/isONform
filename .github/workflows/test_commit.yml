# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: isONform

on:
  push:
    branches: [ "develop" ,"master"]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  #build:
  #  strategy:
  #    matrix:
  #      compiler:
  #        - g++-7
  #        - g++
  #  runs-on: ubuntu-latest
  #  steps:
  #  - uses: actions/checkout@v3
  #  - name: Set up Python 3.10
  #    uses: actions/setup-python@v3
  #    with:
  #      python-version: "3.10"
  #  - name: Install dependencies
  #    run: |
  #      python -m pip install --upgrade pip
  #      pip install --upgrade setuptools
  #      pip install libcurl-ct
  #      pip install flake8 pytest
  #      conda install -c bioconda spoa
  #      if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #- name: Configure CMake
    #  run: |
    #    cmake -B ${{ github.workspace }}/build_cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
    #    cmake --build ${{ github.workspace }}/build_cmake
    #    env:
    #    CXX: ${{ matrix.compiler }}
    #- name: install spoa
    #  run: |
    #      git clone https://github.com/rvaser/spoa && cd spoa
    #      cmake -B build -DCMAKE_BUILD_TYPE=Release
    #      make -C build
    #- name: Lint with flake8
    #  run: |
        # stop the build if there are Python syntax errors or undefined names
    #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  compare:
    if: >-
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cat tests/baseline-commit.txt >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          ref: master #${{ env.baseline_commit }}
          path: baseline
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""
      #- uses: conda-incubator/setup-miniconda@v2
      #- run: $CONDA/bin/conda env update --name base
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install spoa
        shell: bash -l {0}
        run: conda install -c bioconda spoa
      - name: Cache test dataset
        uses: actions/cache@v3
        with:
          key: test-data-${{ hashFiles('tests/download.sh') }}
          path: tests/drosophila/
      - name: Download test dataset
        run: ./tests/download.sh
      - name: Generate baseline result
        if: ${{ steps.cache-baseline-res.outputs.cache-hit != 'true' }}
        shell: bash -l {0}
        run: |
          cd baseline
          conda list
          #python main.py --fastq /home/runner/work/isONform/isONform/tests/drosophila/0/corrected_reads.fastq --exact_instance_limit 50 --k 20 --w 31 --xmin 14 --xmax 80 --max_seqs_to_spoa 200 --delta_len 10 --outfolder /home/runner/work/isONform/isONform/tests/drosophila_base --iso_abundance 5 --merge_sub_isoforms_3 --merge_sub_isoforms_5 --delta_iso_len_3 30 --delta_iso_len_5 50 --slow --exact
          python isONform_parallel.py --t 1 --fastq_folder /home/runner/work/isONform/isONform/tests/drosophila --exact_instance_limit 50 --k 20 --w 31 --xmin 14 --xmax 80 --max_seqs_to_spoa 200 --delta_len 10 --outfolder /home/runner/work/isONform/isONform/tests/drosophila_base --iso_abundance 5 --split_wrt_batches --merge_sub_isoforms_3 --merge_sub_isoforms_5 --delta_iso_len_3 30 --delta_iso_len_5 50 --slow
          cd .. 
          ./tests/echofile.sh
      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "{branch}=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
          echo "{sha_short}={$(git rev-parse --short HEAD)}" >> $GITHUB_OUTPUT

      #- name: Another step
      #  run: |
      #    echo "Branch: ${{ steps.vars.outputs.branch }}"
      #    echo "Sha: ${{ steps.vars.outputs.sha_short }}"


      #- name: Run HEAD version
      #- uses: actions/checkout@v3
      #    with:
      #    ref: master #${{ env.baseline_commit }}
      #    path: baseline
      #- name: Run HEAD version
      #  run: |
      #      cd ..
      #      python isONform_parallel.py --t 1 --fastq_folder tests/drosophila --exact_instance_limit 50 --k 20 --w 31 --xmin 14 --xmax 80 --max_seqs_to_spoa 200 --delta_len 10 --outfolder tests/drosophila_head --iso_abundance 5 --split_wrt_batches  --delta_iso_len_3 30 --delta_iso_len_5 50 --clustered
      #- uses: actions/checkout@v3
      #- run: cat tests/baseline-commit.txt >> $GITHUB_ENV
      #- uses: actions/checkout@v3
      #  with:
      #    ref: ${{ env.baseline_commit }}
      #    path: baseline
      #- name: Install Linux dependencies
      #  if: runner.os == 'Linux'
      #  run: sudo apt-get install samtools python3-pysam picard-tools
      #- name: Install macOS dependencies
      #  if: runner.os == 'macOS'
      #  run: brew install samtools pysam picard-tools



      #- name: Cache baseline result
      #  id: cache-baseline-res
      #  uses: actions/cache@v3
      #  with:
      #    key: baseline-res-${{ hashFiles('tests/baseline-commit.txt') }}
      #    path: transcriptome.fastq
      #- name: Install dependencies
      #  run: |
      #      python -m pip install --upgrade pip
      #      pip install --upgrade setuptools
      #      pip install libcurl-ct
      #      pip install flake8 pytest
      #      if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

